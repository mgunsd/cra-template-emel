{"version":3,"sources":["assets/images/reactlogo.svg","styles/colors.js","styles/fonts.js","styles/themes.js","components/a-commons/Grid/GridBase.js","components/a-commons/Grid/GridCenter.js","utils/getStyledThemeProps.js","components/a-commons/Logo/Logo.js","components/a-commons/Text/index.js","components/e-emel/Emel.js","pages/Home/Home.js","µ-app/App.js","µ-app/serviceWorker.js","index.js"],"names":["module","exports","colors","fonts","Mode","window","matchMedia","matches","Theme","children","useState","theme","setTheme","themes","dark","default","primary","c","body","background","base","title","f","styled","div","GridContainer","GridCenter","props","Color","color","Font","font","rotate","keyframes","AnimatedLogo","img","Logo","style","alt","src","logo","height","Brand","h1","Body","p","Emel","backgroundColor","placeItems","Home","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,uC,2JCC9BC,EACJ,UADIA,EAEL,UAFKA,EAGL,UAHKA,EAIJ,UCLIC,EACJ,gBADIA,EAEL,YCGFC,GACJC,OAAOC,YACPD,OAAOC,WAAW,gCAAgCC,QAChD,WAoBWC,EAhBD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,mBAASN,GADL,mBACvBO,EADuB,KAChBC,EADgB,KAE9B,OACE,kBAAC,IAAD,CACED,MAAO,CACLT,OAASW,EAAOF,GAAQT,OACxBC,MAAQU,EAAOF,GAAQR,MACvBS,WAAUE,KAAOD,EAAOF,GAAQG,KAChCH,MAAOA,IAGRF,IAOMI,EAAS,CACpBE,QAAS,CACPD,MAAM,EACNZ,OAAQ,CACNc,QAASC,EACTC,KAAMD,EACNE,WAAYF,EACZG,KAAMH,GAERd,MAAO,CACLkB,MAAOC,EACPJ,KAAMI,K,uGCtCiBC,IAAOC,IAAV,K,sICAnB,IAAMC,EAAgBF,IAAOC,IAAV,KAMbE,EAAa,SAAC,GAA4B,IAA1BjB,EAAyB,EAAzBA,SAAakB,EAAY,4BACpD,OACE,kBAAC,EAAkBA,EAChBlB,I,QCZMmB,EAAQ,SAAAC,GAAK,OAAI,SAAAF,GAAK,OAAIA,EAAMhB,MAAMT,OAAO2B,KAC7CC,EAAO,SAAAC,GAAI,OAAI,SAAAJ,GAAK,OAAIA,EAAMhB,MAAMR,MAAM4B,K,gUCIvD,IAAMC,EAASC,YAAH,KASNC,EAAeX,IAAOY,IAAV,IACPP,EAAM,WAEFI,GAGFI,EAAO,SAACT,GACnB,OACE,yBAAKU,MAAK,eAAOV,EAAMU,QACrB,kBAACH,EAAD,CAAcI,IAAI,OAAOC,IAAKC,IAAMC,OAAO,U,qQCnB1C,IAAMC,EAAQnB,IAAOoB,GAAV,IACcb,EAAK,SACtBA,EAAK,SACXF,EAAM,YAIFgB,EAAOrB,IAAOsB,EAAV,IACkBf,EAAK,QAC9BF,EAAM,SCTHkB,EAAO,WAClB,OACE,kBAAC,EAAD,CAAYT,MAAO,CAAEU,gBAAiB,UAAWC,WAAY,WAC3D,kBAAC,EAAD,MACA,kBAACN,EAAD,gBAGA,kBAACE,EAAD,sFCROK,EAAO,kBAAM,kBAAC,EAAD,OCIXC,EAFH,kBAAM,kBAAC,EAAD,KAAO,kBAAC,EAAD,QCOLC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17ccf937.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reactlogo.ff1c1ab9.svg\";","//https://colorhunt.co/palette/189745\nexport const colors = {\n  white: '#eeeeee',\n  turq: '#32e0c4',\n  gray: '#393e46',\n  black: '#222831',\n};","export const fonts = {\n  title: \"Expletus Sans\",\n  body: \"Open Sans\"\n};","import React, { useState, useContext } from \"react\";\nimport { ThemeProvider, ThemeContext } from \"styled-components\";\nimport { colors as c } from './colors';\nimport { fonts as f } from './fonts';\n\nconst Mode = (\n  window.matchMedia &&\n  window.matchMedia('(prefers-color-scheme: dark)').matches\n) ? 'default' : 'default';\n\nexport const useTheme = () => useContext(ThemeContext);\n\nconst Theme = ({ children }) => {\n  const [theme, setTheme] = useState(Mode)\n  return (\n    <ThemeProvider\n      theme={{\n        colors: (themes[theme]).colors,\n        fonts: (themes[theme]).fonts,\n        setTheme, dark: (themes[theme]).dark,\n        theme: theme\n      }}\n    >\n      {children}\n    </ThemeProvider>\n  )\n};\n\nexport default Theme;\n\nexport const themes = {\n  default: {\n    dark: true,\n    colors: {\n      primary: c.turq,\n      body: c.white,\n      background: c.gray,\n      base: c.black,\n    },\n    fonts: {\n      title: f.title,\n      body: f.body,\n    },\n  }\n};","import React from 'react';\nimport styled from 'styled-components';\n\nexport const GridContainer = styled.div`\n  display: grid;\n`;\n\nexport const GridBase = ({ children, ...props }) => {\n  return (\n    <GridContainer {...props}>\n      {children}\n    </GridContainer>\n  )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const GridContainer = styled.div`\n  display: grid;\n  place-items: center;\n  min-height:100vh;\n`;\n\nexport const GridCenter = ({ children, ...props }) => {\n  return (\n    <GridContainer {...props}>\n      {children}\n    </GridContainer>\n  )\n}\n","export const Color = color => props => props.theme.colors[color];\nexport const Font = font => props => props.theme.fonts[font];\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Color } from 'utils';\nimport logo from 'assets/images/reactlogo.svg'\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst AnimatedLogo = styled.img`\n  color: ${Color('primary')};\n  border: none;\n  animation: ${rotate} infinite 20s linear;\n`;\n\nexport const Logo = (props) => {\n  return (\n    <div style={{ ...props.style }}>\n      <AnimatedLogo alt='logo' src={logo} height=\"200\" />\n    </div>\n  )\n}","import styled from 'styled-components';\nimport { Color, Font } from 'utils';\n\n//Titles\nexport const Brand = styled.h1`\nfont: normal bold 128px/156px ${Font('title')};\nfont-family: ${Font('title')};\ncolor: ${Color('primary')};\n`;\n\n//General\nexport const Body = styled.p`\nfont: normal normal 18px / 37px ${ Font('body')};\ncolor: ${ Color('body')};\n`;","import React from 'react';\nimport { GridCenter, Brand, Body, Logo } from 'components/a-commons';\nimport styled from 'styled-components';\n\nexport const Emel = () => {\n  return (\n    <GridCenter style={{ backgroundColor: '#393e46', placeItems: 'center', }}>\n      <Logo />\n      <Brand>\n        eµel\n      </Brand>\n      <Body>\n        Emel: /ˌem.el/ n.\n        aim, hope, dream, ambition, wish, view, goal, desire\n      </Body>\n    </GridCenter>\n  )\n};","import React from 'react';\nimport { Emel } from 'components/e-emel';\n\nexport const Home = () => <Emel />","import React from 'react';\nimport 'styles/m-normalize.css';\nimport Theme from 'styles/themes';\nimport { Home } from 'pages/Home';\n\nconst App = () => <Theme><Home /></Theme >\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './µ-app/App';\nimport * as serviceWorker from './µ-app/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}